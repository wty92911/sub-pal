services:
  database:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: sub_pal
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../backups:/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ../../
      dockerfile: docker/backend/Dockerfile
    environment:
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD}@database:5432/sub_pal
      - JWT_SECRET=${JWT_SECRET}
      - HOST=0.0.0.0
      - PORT=3000
      - RUST_LOG=warn
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - APP_URL=${APP_URL}
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ../../migrations:/app/migrations
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ../../ui
      dockerfile: ../docker/frontend/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
